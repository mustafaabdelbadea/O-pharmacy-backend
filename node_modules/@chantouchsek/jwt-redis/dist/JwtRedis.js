"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const jsonwebtoken = require("jsonwebtoken");
const Redis_1 = require("./Redis");
const TokenInvalidError_1 = require("./error/TokenInvalidError");
const TokenDestroyedError_1 = require("./error/TokenDestroyedError");
const utils_1 = require("./utils");
class JwtRedis {
    constructor(client, options) {
        this.client = client;
        this.options = Object.assign({ prefix: 'jwt_label:' }, options || {});
        this.redis = new Redis_1.default(client);
    }
    sign(payload, secretOrPrivateKey, options) {
        return Promise.resolve()
            .then(async () => {
            const jti = payload.jti || utils_1.generateId(10);
            const token = jsonwebtoken.sign(Object.assign(Object.assign({}, payload), { jti }), secretOrPrivateKey, options);
            const decoded = jsonwebtoken.decode(token);
            const key = this.options.prefix + jti;
            if (decoded.exp) {
                await this.redis.setExpire(key, 'true', 'EX', Math.floor(decoded.exp - Date.now() / 1000));
            }
            else {
                await this.redis.set(key, 'true');
            }
            return token;
        });
    }
    destroy(jti) {
        const key = this.options.prefix + jti;
        return this.redis.del(key);
    }
    decode(token, options) {
        return jsonwebtoken.decode(token, options);
    }
    verify(token, secretOrPublicKey, options) {
        return new Promise((resolve, reject) => {
            return jsonwebtoken.verify(token, secretOrPublicKey, options, (err, decoded) => {
                if (err) {
                    reject(err);
                }
                resolve(decoded);
            });
        }).then((decoded) => {
            if (!decoded.jti) {
                throw new TokenInvalidError_1.default();
            }
            const { jti } = decoded;
            const key = this.options.prefix + jti;
            return this.redis.get(key)
                .then((result) => {
                if (!result) {
                    throw new TokenDestroyedError_1.default();
                }
                return decoded;
            });
        });
    }
}
exports.default = JwtRedis;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiSnd0UmVkaXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvSnd0UmVkaXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFDQSw2Q0FBNkM7QUFTN0MsbUNBQTRCO0FBQzVCLGlFQUEwRDtBQUMxRCxxRUFBOEQ7QUFDOUQsbUNBQXFDO0FBTXJDLE1BQXFCLFFBQVE7SUFJekIsWUFBNkIsTUFBeUIsRUFBRSxPQUFpQjtRQUE1QyxXQUFNLEdBQU4sTUFBTSxDQUFtQjtRQUNsRCxJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBQyxNQUFNLEVBQUUsWUFBWSxFQUFDLEVBQUUsT0FBTyxJQUFJLEVBQUUsQ0FBQyxDQUFDO1FBQ3BFLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxlQUFLLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDbkMsQ0FBQztJQVFNLElBQUksQ0FBc0MsT0FBVSxFQUFFLGtCQUEwQixFQUFFLE9BQXFCO1FBQzFHLE9BQU8sT0FBTyxDQUFDLE9BQU8sRUFBRTthQUNuQixJQUFJLENBQUMsS0FBSyxJQUFJLEVBQUU7WUFDYixNQUFNLEdBQUcsR0FBRyxPQUFPLENBQUMsR0FBRyxJQUFJLGtCQUFVLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDMUMsTUFBTSxLQUFLLEdBQVcsWUFBWSxDQUFDLElBQUksaUNBQUssT0FBTyxLQUFFLEdBQUcsS0FBRyxrQkFBa0IsRUFBRSxPQUFPLENBQUMsQ0FBQztZQUN4RixNQUFNLE9BQU8sR0FBUSxZQUFZLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ2hELE1BQU0sR0FBRyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxHQUFHLEdBQUcsQ0FBQztZQUN0QyxJQUFJLE9BQU8sQ0FBQyxHQUFHLEVBQUU7Z0JBQ2IsTUFBTSxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxHQUFHLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEdBQUcsSUFBSSxDQUFDLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUM7YUFDOUY7aUJBQU07Z0JBQ0gsTUFBTSxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsTUFBTSxDQUFDLENBQUM7YUFDckM7WUFDRCxPQUFPLEtBQUssQ0FBQztRQUNqQixDQUFDLENBQUMsQ0FBQTtJQUNWLENBQUM7SUFNTSxPQUFPLENBQUMsR0FBVztRQUN0QixNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sR0FBRyxHQUFHLENBQUM7UUFDdEMsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUMvQixDQUFDO0lBT00sTUFBTSxDQUFJLEtBQWEsRUFBRSxPQUF1QjtRQUNuRCxPQUFPLFlBQVksQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLE9BQU8sQ0FBTSxDQUFDO0lBQ3BELENBQUM7SUFRTSxNQUFNLENBQXNDLEtBQWEsRUFBRSxpQkFBeUQsRUFBRSxPQUF1QjtRQUNoSixPQUFPLElBQUksT0FBTyxDQUFDLENBQUMsT0FBTyxFQUFFLE1BQU0sRUFBRSxFQUFFO1lBQ25DLE9BQU8sWUFBWSxDQUFDLE1BQU0sQ0FBQyxLQUFLLEVBQUUsaUJBQWlCLEVBQUUsT0FBTyxFQUFFLENBQUMsR0FBaUIsRUFBRSxPQUFVLEVBQUUsRUFBRTtnQkFDNUYsSUFBSSxHQUFHLEVBQUU7b0JBQ0wsTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDO2lCQUNmO2dCQUNELE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztZQUNyQixDQUFDLENBQUMsQ0FBQTtRQUNOLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLE9BQVUsRUFBRSxFQUFFO1lBQ25CLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxFQUFFO2dCQUNkLE1BQU0sSUFBSSwyQkFBaUIsRUFBRSxDQUFDO2FBQ2pDO1lBQ0QsTUFBTSxFQUFFLEdBQUcsRUFBRSxHQUFHLE9BQU8sQ0FBQztZQUN4QixNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLE1BQU0sR0FBRyxHQUFHLENBQUM7WUFDdEMsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUM7aUJBQ3JCLElBQUksQ0FBQyxDQUFDLE1BQWMsRUFBRSxFQUFFO2dCQUNyQixJQUFJLENBQUMsTUFBTSxFQUFFO29CQUNULE1BQU0sSUFBSSw2QkFBbUIsRUFBRSxDQUFDO2lCQUNuQztnQkFDRCxPQUFPLE9BQU8sQ0FBQztZQUNuQixDQUFDLENBQUMsQ0FBQztRQUNYLENBQUMsQ0FBQyxDQUFBO0lBQ04sQ0FBQztDQUNKO0FBOUVELDJCQThFQyJ9